 /** Weather Metrics Web Application **/



#1

Install Node.js

#2

// The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications directly from a command shell.
// ng executable

npm install -g @angular/cli

#3

Note: This Creates the Directory

ng new WeatherMetricsWeb --routing --style=css --no-ssr


#4

Update directory structure



app\features
app\core 
app\layouts
app\models 
app\shared\components
app\shared\services
app\shared\pipes
app\shared\directives
src\assets\images
src\assets\styles







#5


BootStrap

From the Root of Application

npm install bootstrap bootstrap-icons

installs the follow direcory: \node_modules\bootstrap


Change the angular.json file and add the bootstrap.scss, bootstrap-icons.css and bootstrap.bundle.min.js files


 "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ],


"scripts": [
  "node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"
]



#6

Add Feature Components


\src\app\features\home\components

Note:  Creates folder with component name

ng generate component  home


\src\app\features\weathermetricsdata\components

ng generate component  weathermetricsdatalist

ng generate component  weathermetricsdatadetail

\src\app\features\weathermetricsdevices\components

ng generate component  weathermetricsdevices


#7


Edit:  app.routes.module.ts

import { HomeComponent } from './features/home/components/home/home.component';
import { WeathermetricsComponent } from './features/weathermetrics/components/weathermetrics/weathermetrics.component';
import { WeathermetricsdevicesComponent  } from './features/weathermetricsdevices/components/weathermetricsdevices/weathermetricsdevices.component';

const routes: Routes = [

  {
    path: '',
    component: HomeComponent
  },
  {
    path: 'home',
    component: HomeComponent
  },
  {
    path: 'weathermetricsdata',
    component: WeathermetricsComponent
  },
  {
    path: 'weathermetricsdevices',
    component: WeathermetricsdevicesComponent
  }

];


#8


Angular CLI Command

Angular App Root

ng add @angular/material



app.components.ts

import { MatToolbarModule } from '@angular/material/toolbar'; // Import MatToolbarModule

 imports: [
    BrowserModule,
    AppRoutingModule,
    MatToolbarModule // Add MatToolbarModule to the imports array
  ],





#8

Edit app.component.html

<main>
  <mat-toolbar class="toolbar">Weather Metrics Data Application</mat-toolbar>

  <mat-toolbar class="navtoolbar">
    <ul>
      <li><a href="/home" class="list-item">Home</a></li>
      <li><a href="/weathermetricsdatalist" class="list-item">Weather Metrics Data</a></li>
      <li><a href="/weathermetricsdevices" class="list-item">Weather Metrics Devices</a></li>
    </ul>
  </mat-toolbar>

</main>

<div class="basic-container">
  <router-outlet>
  </router-outlet>
</div>


Update CSS 

/src/styles.css




#9

Create a Footer in app\layout\components

\src\app\layout\components\

Note:  Creates folder with component name

ng generate component footer


foot.component.html

<div class="footer">{{currentDate | date:'yyyy-MM-dd HH:mm:ss'}}</div>





css

.footer {
  background-color: black !important;
  color: white !important;
  position: absolute;
  bottom: 0;
  width: 100%;
  /* Set the fixed height of the footer here */
  height: 40px;
}



#10

Create Services

Note:  Does Not Create the Subdirectory You Must Specify

\src\app\features\weathermetricsdata\services


ng generate service weathermetricsdata\weathermetricsdata


\src\app\features\weathermetricsdevices\services


ng generate service weathermetricsdevices\weathermetricsdevices


\src\app\shared\services\

ng generate service httpservice\httpservice


#11

Create Model


#12


Create Shared Confirm Message Box

ng generate component confirm-dialog




#12


Create weathermetricsdatalist component

Using MatTableModule  Online Examples



#14

Modify WeathermetricsdatadetailComponent

Using Material Design Components and Reactive Forms









#30

Run The Application

ng serve 



#31

Configuration files

https://medium.com/@hongtatyew/about-environment-ts-in-your-angular-applications-50646ab08c81

\src\environment

environment.ts
environment.prod.ts

angular.json

For Production and Development Configurations

Production

"fileReplacements": [
                {
                  "replace": "src/environments/environment.ts",
                  "with": "src/environments/environment.prod.ts"
                }
              ],


Development

"fileReplacements": [
                {
                  "replace": "src/environments/environment.prod.ts",
                  "with": "src/environments/environment.ts"
                }
              ],


#32


https://codebuckets.com/2018/05/26/hosting-angular-in-iis-under-an-existing-website/


https://github.com/angular/angular/issues/11046


provide(APP_BASE_HREF, { useValue: '/' }),



ng build --configuration=production  --base-href /WeatherMetricsDataApplication/

Local Install

Issues with installing as Application under IIS Site.



<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <system.webServer>
    <directoryBrowse enabled="true" />
    <rewrite>
      <rules>
        <rule name="Angular Routes" stopProcessing="true">
          <match url=".*" />
          <conditions logicalGrouping="MatchAll">
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
          </conditions>
          <action type="Rewrite" url="/WeatherMetricsDataApplication/index.html" />
        </rule>
      </rules>
    </rewrite>
        <httpErrors>
            <remove statusCode="404" subStatusCode="-1" />
            <error statusCode="404" prefixLanguageFilePath="" path="/index.html" responseMode="ExecuteURL" />
        </httpErrors>
  </system.webServer>
</configuration>